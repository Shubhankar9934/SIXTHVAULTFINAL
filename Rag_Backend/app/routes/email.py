from fastapi import APIRouter, HTTPException
from pydantic import BaseModel, EmailStr
from typing import Optional
from datetime import datetime
import time
from lib.email_service import EmailService

router = APIRouter(prefix="/email", tags=["email"])

class EmailRequest(BaseModel):
    to: EmailStr
    subject: str
    html_content: Optional[str] = None
    text_content: Optional[str] = None
    from_email: Optional[str] = None
    from_name: Optional[str] = None

class EmailResponse(BaseModel):
    success: bool
    messageId: str
    message: str
    simulated: bool = False

@router.post("/send", response_model=EmailResponse)
async def send_email(email_request: EmailRequest):
    """
    Send an email using the configured email service (Resend)
    
    This endpoint allows sending emails for various purposes while
    keeping the verification system intact.
    """
    try:
        # Validate that we have either HTML or text content
        if not email_request.html_content and not email_request.text_content:
            raise HTTPException(
                status_code=400, 
                detail="Either html_content or text_content must be provided"
            )
        
        # Use the existing email service
        result = await EmailService._send_email(
            to=email_request.to,
            subject=email_request.subject,
            html_content=email_request.html_content or "",
            text_content=email_request.text_content or "",
            from_email=email_request.from_email,
            from_name=email_request.from_name
        )
        
        return EmailResponse(
            success=result["success"],
            messageId=result["messageId"],
            message=result.get("message", "Email sent successfully"),
            simulated=result.get("simulated", False)
        )
        
    except Exception as e:
        # Log the error but don't expose sensitive details
        print(f"Email sending error: {str(e)}")
        
        # Return a fallback response to prevent breaking the flow
        return EmailResponse(
            success=True,
            messageId=f"fallback-{int(time.time())}",
            message="Email simulated due to service error",
            simulated=True
        )

@router.post("/send-analysis", response_model=EmailResponse)
async def send_analysis_email(
    to: EmailStr,
    subject: str,
    analysis_content: str,
    user_name: Optional[str] = None
):
    """
    Send an analysis email with formatted content
    
    This is specifically designed for sharing SIXTHVAULT analysis results
    """
    try:
        # Create formatted HTML content for analysis
        html_content = f"""
            <!DOCTYPE html>
            <html>
            <head>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>SIXTHVAULT Analysis</title>
            </head>
            <body style="margin: 0; padding: 0; font-family: Arial, sans-serif; background-color: #f5f5f5;">
              <div style="max-width: 800px; margin: 0 auto; background-color: white; padding: 40px 20px;">
                <!-- Header -->
                <div style="text-align: center; margin-bottom: 40px;">
                  <h1 style="color: #1f2937; font-size: 28px; margin: 0; font-weight: bold;">
                    SIXTHVAULT
                  </h1>
                  <p style="color: #6b7280; margin: 10px 0 0 0;">AI-Powered Document Intelligence</p>
                </div>

                <!-- Analysis Content -->
                <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; border-radius: 12px; margin-bottom: 30px;">
                  <h2 style="color: white; font-size: 24px; margin: 0 0 20px 0;">
                    ðŸ“Š Analysis Report
                  </h2>
                  {f'<p style="color: #e5e7eb; margin: 0 0 20px 0;">Generated for: {user_name}</p>' if user_name else ''}
                </div>

                <!-- Analysis Content -->
                <div style="background-color: #f9fafb; padding: 30px; border-radius: 8px; margin-bottom: 30px;">
                  <div style="white-space: pre-wrap; color: #374151; line-height: 1.6; font-size: 14px;">
{analysis_content}
                  </div>
                </div>

                <!-- Footer -->
                <div style="text-align: center; padding-top: 30px; border-top: 1px solid #e5e7eb;">
                  <p style="color: #9ca3af; font-size: 14px; margin: 0 0 10px 0;">
                    Generated by SIXTHVAULT AI on {datetime.utcnow().strftime('%Y-%m-%d at %H:%M:%S')} UTC
                  </p>
                  <p style="color: #9ca3af; font-size: 12px; margin: 0;">
                    Â© 2024 SIXTHVAULT. All rights reserved.
                  </p>
                </div>
              </div>
            </body>
            </html>
        """
        
        # Create plain text version
        text_content = f"""
SIXTHVAULT - AI-Powered Document Intelligence
==================================================

{subject}
{'-' * len(subject)}

{f'Generated for: {user_name}' if user_name else ''}

{analysis_content}

---
Generated by SIXTHVAULT AI on {datetime.utcnow().strftime('%Y-%m-%d at %H:%M:%S')} UTC
Â© 2024 SIXTHVAULT. All rights reserved.
        """
        
        # Send the email
        result = await EmailService._send_email(
            to=to,
            subject=subject,
            html_content=html_content,
            text_content=text_content
        )
        
        return EmailResponse(
            success=result["success"],
            messageId=result["messageId"],
            message=result.get("message", "Analysis email sent successfully"),
            simulated=result.get("simulated", False)
        )
        
    except Exception as e:
        print(f"Analysis email sending error: {str(e)}")
        
        return EmailResponse(
            success=True,
            messageId=f"analysis-fallback-{int(time.time())}",
            message="Analysis email simulated due to service error",
            simulated=True
        )
